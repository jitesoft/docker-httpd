include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - download
  - verify
  - build
  - containerize
  - scan

download:httpd:
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: download
  before_script:
    - apk add --no-cache wget grep
  script:
    - HTTPD_VERSION=$(wget -qO - https://www-eu.apache.org/dist/httpd/ | grep -oP '(?<=\<a href=\"httpd-)([0-9]{0,2}(\.?){2}){2}([0-9]{0,2})' | awk '{print $1}' | uniq | sort -V -r | awk 'NR==1{print $1}')
    - echo "Version - ${HTTPD_VERSION}"
    - echo -e ${HTTPD_VERSION} > version.txt
    - wget https://www-eu.apache.org/dist/httpd/httpd-${HTTPD_VERSION}.tar.gz -O httpd-${HTTPD_VERSION}.tar.gz
    - wget https://www-eu.apache.org/dist/httpd/httpd-${HTTPD_VERSION}.tar.gz.sha256 -O httpd-${HTTPD_VERSION}.tar.gz.sha256
    - wget https://www-eu.apache.org/dist/httpd/httpd-${HTTPD_VERSION}.tar.gz.asc -O httpd-${HTTPD_VERSION}.tar.gz.asc
  artifacts:
    paths:
      - version.txt
      - httpd*
    expire_in: 1 day

gpg:import:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: download
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - |
      for key in `cat gpg.txt`; do
        gpg --list-keys ${key} || (
          gpg --keyserver pgp.mit.edu --recv-keys "${key}" ||
          gpg --keyserver keyserver.pgp.com --recv-keys "${key}" ||
          gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${key}"
        )
      done
    - gpg --export > keys.out
  cache:
    key: httpd.gpg.keyring
    paths:
      - keys.out
  artifacts:
    paths:
      - keys.out
    expire_in: 1 day

verify:
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: verify
  needs:
    - gpg:import
    - download:httpd
  script:
    - VERSION=$(cat version.txt)
    - cat httpd-${VERSION}.tar.gz.sha256 | sha256sum -c -
    - gpg --import keys.out
    - gpg --verify httpd-${VERSION}.tar.gz.asc httpd-${VERSION}.tar.gz
    - mv httpd-${VERSION}.tar.gz httpd.tar.gz
  artifacts:
    expire_in: 1 day
    paths:
      - version.txt
      - httpd.tar.gz

.build:
  stage: build
  needs:
    - verify
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - export CCACHE_DIR="${CI_PROJECT_DIR}/ccache"
    - apk add --no-cache ccache perl apr-util-ldap libxml2-dev tar apr-dev pcre-dev build-base gcc apr-util-dev lua-dev nghttp2-dev curl-dev openssl-dev jansson-dev brotli-dev zlib-dev libc-dev dpkg-dev
    - mkdir out src
    - export PATH="/usr/lib/ccache/bin:$PATH"
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
  script:
    - tar -xzhf httpd.tar.gz -C src --strip-components=1
    - cd src
    - ./configure --prefix=/usr/local/apache2 --build=$(cat /etc/apk/arch)-linux-musl --enable-mods-shared=reallyall --enable-mpms-shared=all
    - make -j4
    - make install
    - rm -r /usr/local/apache2/man /usr/local/apache2/manual
    - cd ..
    - ccache -s
    - $(cd /usr/local/apache2 && tar -czf /tmp/httpd.tar.gz *)
    - mv version.txt out/version.txt
    - mv /tmp/httpd.tar.gz out/httpd-${ARCH}.tar.gz
  artifacts:
    paths:
      - out
    expire_in: 1 day
  cache:
    paths:
      - ccache
    key: apache-httpd.build.ccache-${ARCH}

build:arm64:
  extends: .build
  variables:
    GIT_STRATEGY: none
    ARCH: arm64
  tags:
    - native-aarch64

build:amd64:
  extends: .build
  variables:
    GIT_STRATEGY: none
    ARCH: amd64
  tags:
    - native-amd64

containerize:
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  needs:
    - build:arm64
    - build:amd64
  script:
    - HTTPD_VERSION=$(cat out/version.txt)
    - TAGS=$(helper "${CI_REGISTRY_IMAGE}" "${HTTPD_VERSION},latest,$(echo ${HTTPD_VERSION} | cut -d'.' -f1,2)")
    - docker buildx build --platform linux/arm64,linux/amd64 --progress plain --push ${TAGS} --build-arg HTTPD_VERSION=${HTTPD_VERSION} .
  tags: [ jitesoft, buildx, protected ]

scan:2:
  needs:
    - containerize
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:latest"
    GIT_STRATEGY: none
  tags:
    - protected
